///
/// BLEDevice.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `BLEDevice`, backed by a C++ struct.
 */
public typealias BLEDevice = margelo.nitro.co.zyke.ble.BLEDevice

public extension BLEDevice {
  private typealias bridge = margelo.nitro.co.zyke.ble.bridge.swift

  /**
   * Create a new instance of `BLEDevice`.
   */
  init(id: String, name: String, rssi: Double, manufacturerData: ManufacturerData, serviceUUIDs: [String], isConnectable: Bool) {
    self.init(std.string(id), std.string(name), rssi, manufacturerData, { () -> bridge.std__vector_std__string_ in
      var __vector = bridge.create_std__vector_std__string_(serviceUUIDs.count)
      for __item in serviceUUIDs {
        __vector.push_back(std.string(__item))
      }
      return __vector
    }(), isConnectable)
  }

  var id: String {
    @inline(__always)
    get {
      return String(self.__id)
    }
    @inline(__always)
    set {
      self.__id = std.string(newValue)
    }
  }
  
  var name: String {
    @inline(__always)
    get {
      return String(self.__name)
    }
    @inline(__always)
    set {
      self.__name = std.string(newValue)
    }
  }
  
  var rssi: Double {
    @inline(__always)
    get {
      return self.__rssi
    }
    @inline(__always)
    set {
      self.__rssi = newValue
    }
  }
  
  var manufacturerData: ManufacturerData {
    @inline(__always)
    get {
      return self.__manufacturerData
    }
    @inline(__always)
    set {
      self.__manufacturerData = newValue
    }
  }
  
  var serviceUUIDs: [String] {
    @inline(__always)
    get {
      return self.__serviceUUIDs.map({ __item in String(__item) })
    }
    @inline(__always)
    set {
      self.__serviceUUIDs = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(newValue.count)
        for __item in newValue {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
    }
  }
  
  var isConnectable: Bool {
    @inline(__always)
    get {
      return self.__isConnectable
    }
    @inline(__always)
    set {
      self.__isConnectable = newValue
    }
  }
}
