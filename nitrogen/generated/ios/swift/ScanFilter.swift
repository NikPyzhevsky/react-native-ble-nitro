///
/// ScanFilter.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `ScanFilter`, backed by a C++ struct.
 */
public typealias ScanFilter = margelo.nitro.co.zyke.ble.ScanFilter

public extension ScanFilter {
  private typealias bridge = margelo.nitro.co.zyke.ble.bridge.swift

  /**
   * Create a new instance of `ScanFilter`.
   */
  init(serviceUUIDs: [String], rssiThreshold: Double, allowDuplicates: Bool, androidScanMode: AndroidScanMode) {
    self.init({ () -> bridge.std__vector_std__string_ in
      var __vector = bridge.create_std__vector_std__string_(serviceUUIDs.count)
      for __item in serviceUUIDs {
        __vector.push_back(std.string(__item))
      }
      return __vector
    }(), rssiThreshold, allowDuplicates, androidScanMode)
  }

  var serviceUUIDs: [String] {
    @inline(__always)
    get {
      return self.__serviceUUIDs.map({ __item in String(__item) })
    }
    @inline(__always)
    set {
      self.__serviceUUIDs = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(newValue.count)
        for __item in newValue {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
    }
  }
  
  var rssiThreshold: Double {
    @inline(__always)
    get {
      return self.__rssiThreshold
    }
    @inline(__always)
    set {
      self.__rssiThreshold = newValue
    }
  }
  
  var allowDuplicates: Bool {
    @inline(__always)
    get {
      return self.__allowDuplicates
    }
    @inline(__always)
    set {
      self.__allowDuplicates = newValue
    }
  }
  
  var androidScanMode: AndroidScanMode {
    @inline(__always)
    get {
      return self.__androidScanMode
    }
    @inline(__always)
    set {
      self.__androidScanMode = newValue
    }
  }
}
