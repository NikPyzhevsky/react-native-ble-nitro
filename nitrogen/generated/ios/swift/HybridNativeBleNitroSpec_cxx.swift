///
/// HybridNativeBleNitroSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNativeBleNitroSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridNativeBleNitroSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::co::zyke::ble::bridge::swift`)
   * from `BleNitro-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.co.zyke.ble.bridge.swift

  /**
   * Holds an instance of the `HybridNativeBleNitroSpec` Swift protocol.
   */
  private var __implementation: any HybridNativeBleNitroSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridNativeBleNitroSpec_

  /**
   * Create a new `HybridNativeBleNitroSpec_cxx` that wraps the given `HybridNativeBleNitroSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNativeBleNitroSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNativeBleNitroSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNativeBleNitroSpec() -> any HybridNativeBleNitroSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNativeBleNitroSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNativeBleNitroSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNativeBleNitroSpec_cxx {
    return Unmanaged<HybridNativeBleNitroSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridNativeBleNitroSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridNativeBleNitroSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridNativeBleNitroSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridNativeBleNitroSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func setRestoreStateCallback(callback: bridge.Func_void_std__vector_BLEDevice_) -> bridge.Result_void_ {
    do {
      try self.__implementation.setRestoreStateCallback(callback: { () -> ([BLEDevice]) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__vector_BLEDevice_(callback)
        return { (__restoredPeripherals: [BLEDevice]) -> Void in
          __wrappedFunction.call({ () -> bridge.std__vector_BLEDevice_ in
            var __vector = bridge.create_std__vector_BLEDevice_(__restoredPeripherals.count)
            for __item in __restoredPeripherals {
              __vector.push_back(__item)
            }
            return __vector
          }())
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func startScan(filter: ScanFilter, callback: bridge.Func_void_std__optional_BLEDevice__std__optional_std__string_) -> bridge.Result_void_ {
    do {
      try self.__implementation.startScan(filter: filter, callback: { () -> (BLEDevice?, String?) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__optional_BLEDevice__std__optional_std__string_(callback)
        return { (__device: BLEDevice?, __error: String?) -> Void in
          __wrappedFunction.call({ () -> bridge.std__optional_BLEDevice_ in
            if let __unwrappedValue = __device {
              return bridge.create_std__optional_BLEDevice_(__unwrappedValue)
            } else {
              return .init()
            }
          }(), { () -> bridge.std__optional_std__string_ in
            if let __unwrappedValue = __error {
              return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
            } else {
              return .init()
            }
          }())
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func stopScan() -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.stopScan()
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isScanning() -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.isScanning()
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getConnectedDevices(services: bridge.std__vector_std__string_) -> bridge.Result_std__vector_BLEDevice__ {
    do {
      let __result = try self.__implementation.getConnectedDevices(services: services.map({ __item in String(__item) }))
      let __resultCpp = { () -> bridge.std__vector_BLEDevice_ in
        var __vector = bridge.create_std__vector_BLEDevice_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_BLEDevice__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_BLEDevice__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getBondedDevices() -> bridge.Result_std__vector_BLEDevice__ {
    do {
      let __result = try self.__implementation.getBondedDevices()
      let __resultCpp = { () -> bridge.std__vector_BLEDevice_ in
        var __vector = bridge.create_std__vector_BLEDevice_(__result.count)
        for __item in __result {
          __vector.push_back(__item)
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_BLEDevice__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_BLEDevice__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func connect(deviceId: std.string, callback: bridge.Func_void_bool_std__string_std__string, disconnectCallback: bridge.std__optional_std__function_void_const_std__string_____deviceId_____bool____interrupted_____const_std__string_____error______) -> bridge.Result_void_ {
    do {
      try self.__implementation.connect(deviceId: String(deviceId), callback: { () -> (Bool, String, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string_std__string(callback)
        return { (__success: Bool, __deviceId: String, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__deviceId), std.string(__error))
        }
      }(), disconnectCallback: { () -> ((_ deviceId: String, _ interrupted: Bool, _ error: String) -> Void)? in
        if bridge.has_value_std__optional_std__function_void_const_std__string_____deviceId_____bool____interrupted_____const_std__string_____error______(disconnectCallback) {
          let __unwrapped = bridge.get_std__optional_std__function_void_const_std__string_____deviceId_____bool____interrupted_____const_std__string_____error______(disconnectCallback)
          return { () -> (String, Bool, String) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_std__string_bool_std__string(__unwrapped)
            return { (__deviceId: String, __interrupted: Bool, __error: String) -> Void in
              __wrappedFunction.call(std.string(__deviceId), __interrupted, std.string(__error))
            }
          }()
        } else {
          return nil
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createBond(deviceId: std.string, callback: bridge.Func_void_bool_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.createBond(deviceId: String(deviceId), callback: { () -> (Bool, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string(callback)
        return { (__success: Bool, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func disconnect(deviceId: std.string, callback: bridge.Func_void_bool_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.disconnect(deviceId: String(deviceId), callback: { () -> (Bool, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string(callback)
        return { (__success: Bool, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isConnected(deviceId: std.string) -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.isConnected(deviceId: String(deviceId))
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func requestMTU(deviceId: std.string, mtu: Double) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.requestMTU(deviceId: String(deviceId), mtu: mtu)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func readRSSI(deviceId: std.string, callback: bridge.Func_void_bool_double_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.readRSSI(deviceId: String(deviceId), callback: { () -> (Bool, Double, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_double_std__string(callback)
        return { (__success: Bool, __rssi: Double, __error: String) -> Void in
          __wrappedFunction.call(__success, __rssi, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func discoverServices(deviceId: std.string, callback: bridge.Func_void_bool_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.discoverServices(deviceId: String(deviceId), callback: { () -> (Bool, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string(callback)
        return { (__success: Bool, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getServices(deviceId: std.string) -> bridge.Result_std__vector_std__string__ {
    do {
      let __result = try self.__implementation.getServices(deviceId: String(deviceId))
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getCharacteristics(deviceId: std.string, serviceId: std.string) -> bridge.Result_std__vector_std__string__ {
    do {
      let __result = try self.__implementation.getCharacteristics(deviceId: String(deviceId), serviceId: String(serviceId))
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func readCharacteristic(deviceId: std.string, serviceId: std.string, characteristicId: std.string, callback: bridge.Func_void_bool_std__shared_ptr_ArrayBuffer__std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.readCharacteristic(deviceId: String(deviceId), serviceId: String(serviceId), characteristicId: String(characteristicId), callback: { () -> (Bool, ArrayBuffer, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__shared_ptr_ArrayBuffer__std__string(callback)
        return { (__success: Bool, __data: ArrayBuffer, __error: String) -> Void in
          __wrappedFunction.call(__success, __data, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func writeCharacteristic(deviceId: std.string, serviceId: std.string, characteristicId: std.string, data: ArrayBuffer, withResponse: Bool, callback: bridge.Func_void_bool_std__shared_ptr_ArrayBuffer__std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.writeCharacteristic(deviceId: String(deviceId), serviceId: String(serviceId), characteristicId: String(characteristicId), data: data, withResponse: withResponse, callback: { () -> (Bool, ArrayBuffer, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__shared_ptr_ArrayBuffer__std__string(callback)
        return { (__success: Bool, __responseData: ArrayBuffer, __error: String) -> Void in
          __wrappedFunction.call(__success, __responseData, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func subscribeToCharacteristic(deviceId: std.string, serviceId: std.string, characteristicId: std.string, updateCallback: bridge.Func_void_std__string_std__shared_ptr_ArrayBuffer_, resultCallback: bridge.Func_void_bool_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.subscribeToCharacteristic(deviceId: String(deviceId), serviceId: String(serviceId), characteristicId: String(characteristicId), updateCallback: { () -> (String, ArrayBuffer) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__string_std__shared_ptr_ArrayBuffer_(updateCallback)
        return { (__characteristicId: String, __data: ArrayBuffer) -> Void in
          __wrappedFunction.call(std.string(__characteristicId), __data)
        }
      }(), resultCallback: { () -> (Bool, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string(resultCallback)
        return { (__success: Bool, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func unsubscribeFromCharacteristic(deviceId: std.string, serviceId: std.string, characteristicId: std.string, callback: bridge.Func_void_bool_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.unsubscribeFromCharacteristic(deviceId: String(deviceId), serviceId: String(serviceId), characteristicId: String(characteristicId), callback: { () -> (Bool, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string(callback)
        return { (__success: Bool, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func requestBluetoothEnable(callback: bridge.Func_void_bool_std__string) -> bridge.Result_void_ {
    do {
      try self.__implementation.requestBluetoothEnable(callback: { () -> (Bool, String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_bool_std__string(callback)
        return { (__success: Bool, __error: String) -> Void in
          __wrappedFunction.call(__success, std.string(__error))
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func state() -> bridge.Result_BLEState_ {
    do {
      let __result = try self.__implementation.state()
      let __resultCpp = __result
      return bridge.create_Result_BLEState_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_BLEState_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func subscribeToStateChange(stateCallback: bridge.Func_void_BLEState) -> bridge.Result_OperationResult_ {
    do {
      let __result = try self.__implementation.subscribeToStateChange(stateCallback: { () -> (BLEState) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_BLEState(stateCallback)
        return { (__state: BLEState) -> Void in
          __wrappedFunction.call(__state.rawValue)
        }
      }())
      let __resultCpp = __result
      return bridge.create_Result_OperationResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_OperationResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func unsubscribeFromStateChange() -> bridge.Result_OperationResult_ {
    do {
      let __result = try self.__implementation.unsubscribeFromStateChange()
      let __resultCpp = __result
      return bridge.create_Result_OperationResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_OperationResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func openSettings() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.openSettings()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
}
