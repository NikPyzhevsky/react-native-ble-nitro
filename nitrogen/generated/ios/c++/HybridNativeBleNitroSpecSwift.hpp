///
/// HybridNativeBleNitroSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNativeBleNitroSpec.hpp"

// Forward declaration of `HybridNativeBleNitroSpec_cxx` to properly resolve imports.
namespace BleNitro { class HybridNativeBleNitroSpec_cxx; }

// Forward declaration of `BLEDevice` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { struct BLEDevice; }
// Forward declaration of `ManufacturerData` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { struct ManufacturerData; }
// Forward declaration of `ManufacturerDataEntry` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { struct ManufacturerDataEntry; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `ScanFilter` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { struct ScanFilter; }
// Forward declaration of `AndroidScanMode` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { enum class AndroidScanMode; }
// Forward declaration of `BLEState` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { enum class BLEState; }
// Forward declaration of `OperationResult` to properly resolve imports.
namespace margelo::nitro::co::zyke::ble { struct OperationResult; }

#include "BLEDevice.hpp"
#include <vector>
#include <functional>
#include <string>
#include "ManufacturerData.hpp"
#include "ManufacturerDataEntry.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include "ScanFilter.hpp"
#include "AndroidScanMode.hpp"
#include <optional>
#include "BLEState.hpp"
#include "OperationResult.hpp"
#include <NitroModules/Promise.hpp>

#include "BleNitro-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::co::zyke::ble {

  /**
   * The C++ part of HybridNativeBleNitroSpec_cxx.swift.
   *
   * HybridNativeBleNitroSpecSwift (C++) accesses HybridNativeBleNitroSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNativeBleNitroSpec_cxx can directly inherit from the C++ class HybridNativeBleNitroSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNativeBleNitroSpecSwift: public virtual HybridNativeBleNitroSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNativeBleNitroSpecSwift(const BleNitro::HybridNativeBleNitroSpec_cxx& swiftPart):
      HybridObject(HybridNativeBleNitroSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline BleNitro::HybridNativeBleNitroSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void setRestoreStateCallback(const std::function<void(const std::vector<BLEDevice>& /* restoredPeripherals */)>& callback) override {
      auto __result = _swiftPart.setRestoreStateCallback(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void startScan(const ScanFilter& filter, const std::function<void(const std::optional<BLEDevice>& /* device */, const std::optional<std::string>& /* error */)>& callback) override {
      auto __result = _swiftPart.startScan(filter, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline bool stopScan() override {
      auto __result = _swiftPart.stopScan();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline bool isScanning() override {
      auto __result = _swiftPart.isScanning();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::vector<BLEDevice> getConnectedDevices(const std::vector<std::string>& services) override {
      auto __result = _swiftPart.getConnectedDevices(services);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::vector<BLEDevice> getBondedDevices() override {
      auto __result = _swiftPart.getBondedDevices();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void connect(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* deviceId */, const std::string& /* error */)>& callback, const std::optional<std::function<void(const std::string& /* deviceId */, bool /* interrupted */, const std::string& /* error */)>>& disconnectCallback) override {
      auto __result = _swiftPart.connect(deviceId, callback, disconnectCallback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void createBond(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.createBond(deviceId, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void disconnect(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.disconnect(deviceId, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline bool isConnected(const std::string& deviceId) override {
      auto __result = _swiftPart.isConnected(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline double requestMTU(const std::string& deviceId, double mtu) override {
      auto __result = _swiftPart.requestMTU(deviceId, std::forward<decltype(mtu)>(mtu));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void readRSSI(const std::string& deviceId, const std::function<void(bool /* success */, double /* rssi */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.readRSSI(deviceId, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void discoverServices(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.discoverServices(deviceId, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::vector<std::string> getServices(const std::string& deviceId) override {
      auto __result = _swiftPart.getServices(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::vector<std::string> getCharacteristics(const std::string& deviceId, const std::string& serviceId) override {
      auto __result = _swiftPart.getCharacteristics(deviceId, serviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void readCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::function<void(bool /* success */, const std::shared_ptr<ArrayBuffer>& /* data */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.readCharacteristic(deviceId, serviceId, characteristicId, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void writeCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::shared_ptr<ArrayBuffer>& data, bool withResponse, const std::function<void(bool /* success */, const std::shared_ptr<ArrayBuffer>& /* responseData */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.writeCharacteristic(deviceId, serviceId, characteristicId, ArrayBufferHolder(data), std::forward<decltype(withResponse)>(withResponse), callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void subscribeToCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::function<void(const std::string& /* characteristicId */, const std::shared_ptr<ArrayBuffer>& /* data */)>& updateCallback, const std::function<void(bool /* success */, const std::string& /* error */)>& resultCallback) override {
      auto __result = _swiftPart.subscribeToCharacteristic(deviceId, serviceId, characteristicId, updateCallback, resultCallback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void unsubscribeFromCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.unsubscribeFromCharacteristic(deviceId, serviceId, characteristicId, callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void requestBluetoothEnable(const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override {
      auto __result = _swiftPart.requestBluetoothEnable(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline BLEState state() override {
      auto __result = _swiftPart.state();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline OperationResult subscribeToStateChange(const std::function<void(BLEState /* state */)>& stateCallback) override {
      auto __result = _swiftPart.subscribeToStateChange(stateCallback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline OperationResult unsubscribeFromStateChange() override {
      auto __result = _swiftPart.unsubscribeFromStateChange();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> openSettings() override {
      auto __result = _swiftPart.openSettings();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    BleNitro::HybridNativeBleNitroSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::co::zyke::ble
