///
/// JBLEState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "BLEState.hpp"

namespace margelo::nitro::co::zyke::ble {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "BLEState" and the the Kotlin enum "BLEState".
   */
  struct JBLEState final: public jni::JavaClass<JBLEState> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/co/zyke/ble/BLEState;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum BLEState.
     */
    [[maybe_unused]]
    [[nodiscard]]
    BLEState toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<BLEState>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JBLEState> fromCpp(BLEState value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldUNKNOWN = clazz->getStaticField<JBLEState>("UNKNOWN");
      static const auto fieldRESETTING = clazz->getStaticField<JBLEState>("RESETTING");
      static const auto fieldUNSUPPORTED = clazz->getStaticField<JBLEState>("UNSUPPORTED");
      static const auto fieldUNAUTHORIZED = clazz->getStaticField<JBLEState>("UNAUTHORIZED");
      static const auto fieldPOWEREDOFF = clazz->getStaticField<JBLEState>("POWEREDOFF");
      static const auto fieldPOWEREDON = clazz->getStaticField<JBLEState>("POWEREDON");
      
      switch (value) {
        case BLEState::UNKNOWN:
          return clazz->getStaticFieldValue(fieldUNKNOWN);
        case BLEState::RESETTING:
          return clazz->getStaticFieldValue(fieldRESETTING);
        case BLEState::UNSUPPORTED:
          return clazz->getStaticFieldValue(fieldUNSUPPORTED);
        case BLEState::UNAUTHORIZED:
          return clazz->getStaticFieldValue(fieldUNAUTHORIZED);
        case BLEState::POWEREDOFF:
          return clazz->getStaticFieldValue(fieldPOWEREDOFF);
        case BLEState::POWEREDON:
          return clazz->getStaticFieldValue(fieldPOWEREDON);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::co::zyke::ble
