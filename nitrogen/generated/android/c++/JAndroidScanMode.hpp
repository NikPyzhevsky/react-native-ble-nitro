///
/// JAndroidScanMode.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "AndroidScanMode.hpp"

namespace margelo::nitro::co::zyke::ble {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "AndroidScanMode" and the the Kotlin enum "AndroidScanMode".
   */
  struct JAndroidScanMode final: public jni::JavaClass<JAndroidScanMode> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/co/zyke/ble/AndroidScanMode;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum AndroidScanMode.
     */
    [[maybe_unused]]
    [[nodiscard]]
    AndroidScanMode toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<AndroidScanMode>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAndroidScanMode> fromCpp(AndroidScanMode value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldLOWLATENCY = clazz->getStaticField<JAndroidScanMode>("LOWLATENCY");
      static const auto fieldBALANCED = clazz->getStaticField<JAndroidScanMode>("BALANCED");
      static const auto fieldLOWPOWER = clazz->getStaticField<JAndroidScanMode>("LOWPOWER");
      static const auto fieldOPPORTUNISTIC = clazz->getStaticField<JAndroidScanMode>("OPPORTUNISTIC");
      
      switch (value) {
        case AndroidScanMode::LOWLATENCY:
          return clazz->getStaticFieldValue(fieldLOWLATENCY);
        case AndroidScanMode::BALANCED:
          return clazz->getStaticFieldValue(fieldBALANCED);
        case AndroidScanMode::LOWPOWER:
          return clazz->getStaticFieldValue(fieldLOWPOWER);
        case AndroidScanMode::OPPORTUNISTIC:
          return clazz->getStaticFieldValue(fieldOPPORTUNISTIC);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::co::zyke::ble
