///
/// JBLEDevice.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "BLEDevice.hpp"

#include "JManufacturerData.hpp"
#include "JManufacturerDataEntry.hpp"
#include "ManufacturerData.hpp"
#include "ManufacturerDataEntry.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>
#include <vector>

namespace margelo::nitro::co::zyke::ble {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "BLEDevice" and the the Kotlin data class "BLEDevice".
   */
  struct JBLEDevice final: public jni::JavaClass<JBLEDevice> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/co/zyke/ble/BLEDevice;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct BLEDevice by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    BLEDevice toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldId = clazz->getField<jni::JString>("id");
      jni::local_ref<jni::JString> id = this->getFieldValue(fieldId);
      static const auto fieldName = clazz->getField<jni::JString>("name");
      jni::local_ref<jni::JString> name = this->getFieldValue(fieldName);
      static const auto fieldRssi = clazz->getField<double>("rssi");
      double rssi = this->getFieldValue(fieldRssi);
      static const auto fieldManufacturerData = clazz->getField<JManufacturerData>("manufacturerData");
      jni::local_ref<JManufacturerData> manufacturerData = this->getFieldValue(fieldManufacturerData);
      static const auto fieldServiceUUIDs = clazz->getField<jni::JArrayClass<jni::JString>>("serviceUUIDs");
      jni::local_ref<jni::JArrayClass<jni::JString>> serviceUUIDs = this->getFieldValue(fieldServiceUUIDs);
      static const auto fieldIsConnectable = clazz->getField<jboolean>("isConnectable");
      jboolean isConnectable = this->getFieldValue(fieldIsConnectable);
      return BLEDevice(
        id->toStdString(),
        name->toStdString(),
        rssi,
        manufacturerData->toCpp(),
        [&]() {
          size_t __size = serviceUUIDs->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = serviceUUIDs->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }(),
        static_cast<bool>(isConnectable)
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JBLEDevice::javaobject> fromCpp(const BLEDevice& value) {
      return newInstance(
        jni::make_jstring(value.id),
        jni::make_jstring(value.name),
        value.rssi,
        JManufacturerData::fromCpp(value.manufacturerData),
        [&]() {
          size_t __size = value.serviceUUIDs.size();
          jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.serviceUUIDs[__i];
            __array->setElement(__i, *jni::make_jstring(__element));
          }
          return __array;
        }(),
        value.isConnectable
      );
    }
  };

} // namespace margelo::nitro::co::zyke::ble
