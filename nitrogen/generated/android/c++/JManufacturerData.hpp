///
/// JManufacturerData.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ManufacturerData.hpp"

#include "JManufacturerDataEntry.hpp"
#include "ManufacturerDataEntry.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>
#include <vector>

namespace margelo::nitro::co::zyke::ble {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "ManufacturerData" and the the Kotlin data class "ManufacturerData".
   */
  struct JManufacturerData final: public jni::JavaClass<JManufacturerData> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/co/zyke/ble/ManufacturerData;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct ManufacturerData by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ManufacturerData toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldCompanyIdentifiers = clazz->getField<jni::JArrayClass<JManufacturerDataEntry>>("companyIdentifiers");
      jni::local_ref<jni::JArrayClass<JManufacturerDataEntry>> companyIdentifiers = this->getFieldValue(fieldCompanyIdentifiers);
      return ManufacturerData(
        [&]() {
          size_t __size = companyIdentifiers->size();
          std::vector<ManufacturerDataEntry> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = companyIdentifiers->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JManufacturerData::javaobject> fromCpp(const ManufacturerData& value) {
      return newInstance(
        [&]() {
          size_t __size = value.companyIdentifiers.size();
          jni::local_ref<jni::JArrayClass<JManufacturerDataEntry>> __array = jni::JArrayClass<JManufacturerDataEntry>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.companyIdentifiers[__i];
            __array->setElement(__i, *JManufacturerDataEntry::fromCpp(__element));
          }
          return __array;
        }()
      );
    }
  };

} // namespace margelo::nitro::co::zyke::ble
