///
/// HybridNativeBleNitroSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridNativeBleNitroSpec.hpp"




namespace margelo::nitro::co::zyke::ble {

  using namespace facebook;

  class JHybridNativeBleNitroSpec: public jni::HybridClass<JHybridNativeBleNitroSpec, JHybridObject>,
                                   public virtual HybridNativeBleNitroSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/co/zyke/ble/HybridNativeBleNitroSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridNativeBleNitroSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridNativeBleNitroSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridNativeBleNitroSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridNativeBleNitroSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    void setRestoreStateCallback(const std::function<void(const std::vector<BLEDevice>& /* restoredPeripherals */)>& callback) override;
    void startScan(const ScanFilter& filter, const std::function<void(const std::optional<BLEDevice>& /* device */, const std::optional<std::string>& /* error */)>& callback) override;
    bool stopScan() override;
    bool isScanning() override;
    std::vector<BLEDevice> getConnectedDevices(const std::vector<std::string>& services) override;
    std::vector<BLEDevice> getBondedDevices() override;
    void connect(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* deviceId */, const std::string& /* error */)>& callback, const std::optional<std::function<void(const std::string& /* deviceId */, bool /* interrupted */, const std::string& /* error */)>>& disconnectCallback) override;
    void createBond(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override;
    void disconnect(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override;
    bool isConnected(const std::string& deviceId) override;
    double requestMTU(const std::string& deviceId, double mtu) override;
    void readRSSI(const std::string& deviceId, const std::function<void(bool /* success */, double /* rssi */, const std::string& /* error */)>& callback) override;
    void discoverServices(const std::string& deviceId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override;
    std::vector<std::string> getServices(const std::string& deviceId) override;
    std::vector<std::string> getCharacteristics(const std::string& deviceId, const std::string& serviceId) override;
    void readCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::function<void(bool /* success */, const std::shared_ptr<ArrayBuffer>& /* data */, const std::string& /* error */)>& callback) override;
    void writeCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::shared_ptr<ArrayBuffer>& data, bool withResponse, const std::function<void(bool /* success */, const std::shared_ptr<ArrayBuffer>& /* responseData */, const std::string& /* error */)>& callback) override;
    void subscribeToCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::function<void(const std::string& /* characteristicId */, const std::shared_ptr<ArrayBuffer>& /* data */)>& updateCallback, const std::function<void(bool /* success */, const std::string& /* error */)>& resultCallback) override;
    void unsubscribeFromCharacteristic(const std::string& deviceId, const std::string& serviceId, const std::string& characteristicId, const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override;
    void requestBluetoothEnable(const std::function<void(bool /* success */, const std::string& /* error */)>& callback) override;
    BLEState state() override;
    OperationResult subscribeToStateChange(const std::function<void(BLEState /* state */)>& stateCallback) override;
    OperationResult unsubscribeFromStateChange() override;
    std::shared_ptr<Promise<void>> openSettings() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridNativeBleNitroSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::co::zyke::ble
